import { PerformAction } from "./action";
import { extractActionDetails } from "./parser";
import { Artifact } from "./types";

const { extractAndRemoveYugActions } = require("./parser");

const fakeRes =
  "```xml<YUGARTIFACT title='Book-keeping App - Fixed Error'>  <YUGACTION type='file' filePath='index.html'>    <!DOCTYPE html>    <html lang='en'>    <head>      <meta charset='UTF-8'>      <meta name='viewport' content='width=device-width, initial-scale=1.0'>      <title>Book-keeping App</title>      <link rel='stylesheet' href='style.css'>    </head>    <body>      <div class='container'>        <h1>Book-keeping App</h1>        <div class='input-section'>          <label for='description'>Description:</label>          <input type='text' id='description' placeholder='Enter description'>          <label for='amount'>Amount:</label>          <input type='number' id='amount' placeholder='Enter amount'>          <label for='type'>Type:</label>          <select id='type'>            <option value='income'>Income</option>            <option value='expense'>Expense</option>          </select>          <button id='add-transaction'>Add Transaction</button>        </div>        <div class='transactions-section'>          <h2>Transactions</h2>          <ul id='transactions-list'>            <!-- Transactions will be added here -->          </ul>        </div>        <div class='summary-section'>          <h2>Summary</h2>          <p>Total Income: <span id='total-income'>0</span></p>          <p>Total Expenses: <span id='total-expenses'>0</span></p>          <p>Balance: <span id='balance'>0</span></p>        </div>      </div>      <script src='script.js'></script>    </body>    </html>  </YUGACTION>  <YUGACTION type='file' filePath='style.css'>    body {      font-family: sans-serif;      margin: 0;      padding: 0;      background-color: #f4f4f4;    }    .container {      width: 80%;      margin: 20px auto;      background-color: #fff;      padding: 20px;      border-radius: 8px;      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);    }    h1 {      text-align: center;      color: #333;    }    .input-section,    .transactions-section,    .summary-section {      margin-bottom: 20px;      padding: 15px;      border: 1px solid #ddd;      border-radius: 5px;    }    label {      display: block;      margin-bottom: 5px;      font-weight: bold;    }    input[type='text'],    input[type='number'],    select {      width: 100%;      padding: 8px;      margin-bottom: 10px;      border: 1px solid #ccc;      border-radius: 4px;      box-sizing: border-box;      /* Ensures padding and border are included in the element's total width and height */    }    button {      background-color: #5cb85c;      color: white;      padding: 10px 15px;      border: none;      border-radius: 4px;      cursor: pointer;      font-size: 16px;    }    button:hover {      background-color: #449d44;    }    .transactions-section ul {      list-style: none;      padding: 0;    }    .transactions-section li {      padding: 10px;      border-bottom: 1px solid #eee;    }    .transactions-section li:last-child {      border-bottom: none;    }    .income {      color: green;    }    .expense {      color: red;    }  </YUGACTION>  <YUGACTION type='file' filePath='script.js'>    document.addEventListener('DOMContentLoaded', function() {      const descriptionInput = document.getElementById('description');      const amountInput = document.getElementById('amount');      const typeSelect = document.getElementById('type');      const addTransactionButton = document.getElementById('add-transaction');      const transactionsList = document.getElementById('transactions-list');      const totalIncomeDisplay = document.getElementById('total-income');      const totalExpensesDisplay = document.getElementById('total-expenses');      const balanceDisplay = document.getElementById('balance');      let transactions = JSON.parse(localStorage.getItem('transactions')) || [];      function updateSummary() {        let totalIncome = 0;        let totalExpenses = 0;        transactions.forEach(transaction => {          if (transaction.type === 'income') {            totalIncome += transaction.amount;          } else {            totalExpenses += transaction.amount;          }        });        const balance = totalIncome - totalExpenses;        totalIncomeDisplay.textContent = totalIncome.toFixed(2);        totalExpensesDisplay.textContent = totalExpenses.toFixed(2);        balanceDisplay.textContent = balance.toFixed(2);      }      function displayTransactions() {        transactionsList.innerHTML = '';        transactions.forEach((transaction, index) => {          const listItem = document.createElement('li');          listItem.className = transaction.type;          listItem.innerHTML = `            ${transaction.description} - $${transaction.amount ? transaction.amount.toFixed(2) : '0.00'}            <button class='delete-btn' data-index='${index}'>Delete</button>          `;          transactionsList.appendChild(listItem);        });        // Add event listeners to delete buttons        const deleteButtons = document.querySelectorAll('.delete-btn');        deleteButtons.forEach(button => {          button.addEventListener('click', deleteTransaction);        });        updateSummary();      }      function addTransaction() {        const description = descriptionInput.value;        const amount = parseFloat(amountInput.value);        const type = typeSelect.value;        if (description.trim() === '' || isNaN(amount)) {          alert('Please enter a valid description and amount.');          return;        }        const transaction = {          description: description,          amount: amount,          type: type        };        transactions.push(transaction);        localStorage.setItem('transactions', JSON.stringify(transactions));        descriptionInput.value = '';        amountInput.value = '';        displayTransactions();      }      function deleteTransaction(event) {        const indexToDelete = event.target.dataset.index;        transactions.splice(indexToDelete, 1);        localStorage.setItem('transactions', JSON.stringify(transactions));        displayTransactions();      }      addTransactionButton.addEventListener('click', addTransaction);      displayTransactions();    });  </YUGACTION></YUGARTIFACT>```";

console.log(fakeRes);

const { extractedActions, updatedText } = extractAndRemoveYugActions(fakeRes);
console.log(extractedActions);

const actionDetails = extractActionDetails(extractedActions);
console.log(actionDetails);

PerformAction(
  { id: "new-app", title: "Book Keeping", response: "" } as Artifact,
  actionDetails,
  (a) => {
    console.log("Action", a);
  }
);
